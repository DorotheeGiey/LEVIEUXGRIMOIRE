const Book = require ('../models/Books');

exports.createBook = (req, res, next) => {
  const bookObject = JSON.parse(req.body.book);                                           /// on récupère toutes les données depuis le navigateur
  delete bookObject._id;                                                                  // on supprime l'Id 
  delete bookObject._userId;                                                              // on supprime aussi le user_id préférant celui du middeware auth qui génère le token et est donc plus sécurisé 
  const book = new Book({
      ...bookObject,                                                                      // on récupère les données moins celles de l'Id et de l'userID
      userId: req.auth.userId,                                                            //  on remplaçe  en base de données par le _userId extrait du token par le middleware d’authentification.
      imageUrl: `${req.protocol}://${req.get('host')}/${req.imagePath}`                   // on récupère l'URL de l'image  
  });

  book.save()
  .then(() => { res.status(201).json({message: 'Livre enregistré !'})})
  .catch(error => { res.status(400).json( { error })})
};


exports.getAllBook = (req, res, next) => {                                 
  Book.find()
    .then(books => res.status(200).json(books))                         
    .catch(error => res.status(400).json({ error }));
};


exports.getOneBook = (req, res, next) => {
  console.log("Recherche du livre avec l'ID :", req.params.id);                 // Imprimer l'ID du livre demandé pour vérifier qu'il est correctement reçu
  Book.findOne({ _id: req.params.id })
    .then(book => {
      console.log("Livre trouvé :", book);                                        // Imprimer l'objet book pour vérifier ce qui est retourné de la base de données
      res.status(200).json(book);
    })
    .catch(error => {
      console.log("Erreur lors de la recherche du livre :", error);                 // Imprimer l'erreur s'il y en a une lors de la recherche dans la base de données
      res.status(404).json({ error });
    });
};


// exports.getOneBook = (req, res, next) => {
//   console.log("Recherche du livre avec l'ID :", req.params.id);                 
//   Book.findOne({ _id: req.params.id })
//     .then(book => {
//       if (book.userId === req.auth.userId){
//       console.log("Livre trouvé :", book, book.userId);                                       
//       res.status(200).json(book);
//       } else {(book.userId != req.auth.userID)
//         res.status(200).json(book);
//       }
//     })
//     .catch(error => {
//       console.log("Erreur lors de la recherche du livre :", error);                 
//       res.status(404).json({ error });
//     });
// };
